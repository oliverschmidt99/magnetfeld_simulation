import json
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Globale Variable zum Speichern der Bibliotheksdaten
library_data = {}


def load_library_data():
    """Lädt die Bauteil-Bibliothek aus der library.json."""
    global library_data
    try:
        with open("library.json", "r", encoding="utf-8") as f:
            library_data = json.load(f)
    except FileNotFoundError:
        print("Fehler: library.json nicht gefunden!")
        library_data = {"copperRails": [], "transformers": [], "transformerSheets": []}
    except json.JSONDecodeError:
        print("Fehler: library.json ist keine valide JSON-Datei!")
        library_data = {"copperRails": [], "transformers": [], "transformerSheets": []}


@app.route("/")
def index():
    """Rendert die Hauptseite mit den Dropdown-Menüs."""
    if not library_data:
        load_library_data()
    return render_template("index.html", library=library_data)


@app.route("/generate", methods=["POST"])
def generate_simulation_json():
    """Nimmt die Formulardaten entgegen und erstellt die simulation.json."""
    form_data = request.json

    # Der globale peakCurrentA wird aus den simulationParams entfernt
    simulation_config = {
        "description": "Setup generated by Web UI",
        "simulationParams": {
            "frequencyHz": int(form_data.get("frequencyHz", 50)),
            "problemDepthM": float(form_data.get("problemDepthM", 0.1)),
            "nominalPrimaryA": int(form_data.get("nominalPrimaryA", 4000)),
            "nominalSecondaryA": int(form_data.get("nominalSecondaryA", 5)),
            "coreRelPermeability": int(form_data.get("coreRelPermeability", 2500)),
        },
        "electricalSystem": form_data.get("electricalSystem", []),
        "assemblies": form_data.get("assemblies", []),
        "standAloneComponents": form_data.get("standAloneComponents", []),
    }

    # Schreibe die Konfiguration in die Datei
    try:
        with open("simulation.json", "w", encoding="utf-8") as f:
            json.dump(simulation_config, f, indent=2)
        return jsonify({"message": "simulation.json wurde erfolgreich erstellt!"}), 200
    except Exception as e:
        return jsonify({"message": f"Fehler beim Schreiben der Datei: {e}"}), 500


if __name__ == "__main__":
    load_library_data()
    app.run(debug=True)

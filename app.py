import json
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Globale Variable zum Speichern der Bibliotheksdaten
library_data = {}


def load_library_data():
    """Lädt die Bauteil-Bibliothek aus der library.json."""
    global library_data
    try:
        with open("library.json", "r", encoding="utf-8") as f:
            library_data = json.load(f)
    except FileNotFoundError:
        print("Fehler: library.json nicht gefunden!")
        library_data = {"copperRails": [], "transformers": [], "transformerSheets": []}
    except json.JSONDecodeError:
        print("Fehler: library.json ist keine valide JSON-Datei!")
        library_data = {"copperRails": [], "transformers": [], "transformerSheets": []}


@app.route("/")
def index():
    """Rendert die Startseite."""
    return render_template("index.html")


@app.route("/configurator")
def configurator():
    """Rendert die Konfigurator-Seite."""
    if not library_data:
        load_library_data()
    return render_template("configurator.html", library=library_data)


@app.route("/visualization")
def visualization():
    """Rendert die Visualisierungs-Seite."""
    return render_template("visualization.html")


@app.route("/analysis")
def analysis():
    """Rendert die Analyse-Seite."""
    return render_template("analysis.html")


@app.route("/simulation")
def simulation():
    """Rendert die Simulations-Konfigurationsseite."""
    return render_template("simulation.html")


@app.route("/generate", methods=["POST"])
def generate_simulation_json():
    """Nimmt die Formulardaten entgegen und erstellt die simulation.json."""
    form_data = request.json

    simulation_config = {
        "description": "Setup generated by Web UI",
        "simulationParams": form_data.get("simulationParams", {}),
        "electricalSystem": form_data.get("electricalSystem", []),
        "assemblies": form_data.get("assemblies", []),
        "standAloneComponents": form_data.get("standAloneComponents", []),
    }

    try:
        with open("simulation.json", "w", encoding="utf-8") as f:
            json.dump(simulation_config, f, indent=2)
        return jsonify({"message": "simulation.json wurde erfolgreich erstellt!"}), 200
    except Exception as e:
        return jsonify({"message": f"Fehler beim Schreiben der Datei: {e}"}), 500


def get_transformer_components(t, pos):
    """Hilfsfunktion, um die einzelnen geometrischen Teile eines Wandlers zu extrahieren."""
    geo = t["geometry"]
    if geo["type"] != "Rectangle":
        return []

    return [
        {
            "type": "rect",
            "x": pos["x"] - geo["outerAirWidth"] / 2,
            "y": pos["y"] - geo["outerAirHeight"] / 2,
            "width": geo["outerAirWidth"],
            "height": geo["outerAirHeight"],
            "fill": "#f0f8ff",
            "label": "Outer Air",
        },
        {
            "type": "rect",
            "x": pos["x"] - geo["coreOuterWidth"] / 2,
            "y": pos["y"] - geo["coreOuterHeight"] / 2,
            "width": geo["coreOuterWidth"],
            "height": geo["coreOuterHeight"],
            "fill": "#d3d3d3",
            "label": "Steel Core",
        },
        {
            "type": "rect",
            "x": pos["x"] - geo["coreInnerWidth"] / 2,
            "y": pos["y"] - geo["coreInnerHeight"] / 2,
            "width": geo["coreInnerWidth"],
            "height": geo["coreInnerHeight"],
            "fill": "#f0f8ff",
            "label": "Inner Air",
        },
        {
            "type": "rect",
            "x": pos["x"] - geo["innerWidth"] / 2,
            "y": pos["y"] - geo["innerHeight"] / 2,
            "width": geo["innerWidth"],
            "height": geo["innerHeight"],
            "fill": "#ffffff",
            "label": "Air Gap (Leiter)",
        },
    ]


@app.route("/visualize", methods=["POST"])
def visualize_setup():
    """Erstellt eine detaillierte Datenstruktur für die SVG-Visualisierung."""
    form_data = request.json
    svg_elements = []

    # Assemblies verarbeiten
    for asm_data in form_data.get("assemblies", []):
        rail_name = asm_data.get("copperRailName")
        transformer_name = asm_data.get("transformerName")
        pos = asm_data.get("position", {"x": 0, "y": 0})

        transformer = next(
            (t for t in library_data["transformers"] if t["name"] == transformer_name),
            None,
        )
        if transformer:
            svg_elements.extend(get_transformer_components(transformer, pos))

        rail = next(
            (r for r in library_data["copperRails"] if r["name"] == rail_name), None
        )
        if rail:
            svg_elements.append(
                {
                    "type": "rect",
                    "x": pos["x"] - rail["width"] / 2,
                    "y": pos["y"] - rail["height"] / 2,
                    "width": rail["width"],
                    "height": rail["height"],
                    "fill": "#b87333",
                    "label": rail_name,
                }
            )

    # Standalone Components verarbeiten
    for comp_data in form_data.get("standAloneComponents", []):
        comp_name = comp_data.get("name")
        pos = comp_data.get("position", {"x": 0, "y": 0})

        sheet = next(
            (s for s in library_data["transformerSheets"] if s["name"] == comp_name),
            None,
        )
        if sheet:
            svg_elements.append(
                {
                    "type": "rect",
                    "x": pos["x"] - sheet["width"] / 2,
                    "y": pos["y"] - sheet["height"] / 2,
                    "width": sheet["width"],
                    "height": sheet["height"],
                    "fill": "#a9a9a9",
                    "label": comp_name,
                }
            )

    return jsonify(svg_elements)


if __name__ == "__main__":
    load_library_data()
    app.run(debug=True)
